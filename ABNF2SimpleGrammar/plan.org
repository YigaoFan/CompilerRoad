* VBA2Python[0/4]
** TODO Generate Cpp code to parse VBA [1/2]
*** DONE Generate lex code[5/6] DEADLINE: <2025-03-09 Sun> Done: <2025-03-10 Mon>
   - [X] add test for lex for future maintain[0/0]
     - understand the std::forward
     - one project can export a header file, because there exists nameof(x) macro
   - [X] solve the conflict issue between TokType Terminal and RegularExpression[1/1]
     - [X] construct wrong DFA which doesn't have state result to Terminal
       - fine the Step struct
       - found: when Freeze, it has multiple result states for one step
       - Minimize<true> merge wrongly [2025-02-24 Mon]
       - fixed: in Minimize<true> worklist doesn't split accept states when specified <2025-02-25 Tue>
       - +actually is NFA2DFA issue, because one state to different states with same step+
   - [X] support more escaped char in Terminal and RegularExpression
     - regular expression for Terminal from "\"((\\\\[\"\\\\rn])|[^\"\n])*\"" to "\"((\\\\\")|[^\"\n])*\""(more simple, but handle escaped char wrongly)
     - in the 2nd one, it matches escaped char without length limit. For input: "\\" | "^", it will eat the second quote mark with previous slash, this is
     - not expect behavior. Only allow escape one char.
     - fixed: "\"((\\\\[^\n])|[^\"\n])*\"", better with not match slash in the right part: "\"((\\\\[^\n])|[^\\\\\"\n])*\""
     - write correct regular expression is hard <2025-02-25 Tue>
   - [X] fix generated code issue
     - [X] handle string terminal and regular expression terminal print 
     - [X] a alone quote char. Caused by wrong operation in AST construction
     - [X] use regular expression to represent DataRange <2025-02-25 Tue>
     - [X] escape the normal string to regular expression form
     - [X] fix regular expression using in ABNF file
     - [X] slash of regular expression in ABNF file need to be escaped in generated cpp code <2025-02-26 Wed>
   - [X] combine same terminal in generated grammar code(when use set<String> to store, it's done)
     - [X] give Terminal item with identical name in global scope
     - [X] use reference to share Terminals between GrammarTransformInfo
     - [X] should we share the OtherGrammars also? Yes, then we don't need many move code
     - [X] sub GrammarTransformInfo should be constructed by parent GrammarTransformInfo, to let parent control the relationship between them <2025-02-26 Wed>
   - [-] generate formal lex rules
     - [X] generate TokType definition
     - [X] not support conditional module
     - [X] fix int to String implicitly <2025-02-27 Thu>
     - [X] think how to lex using ABNF grammar and regular expression
       - [X] transform simple ABNF grammar(without recursive) to regular expression <2025-02-28 Fri> basically complete <2025-03-02 Sun> complete
       - [X] implement topological sort to plan the order to transform the ABNF grammar item which is used to lex
         - [X] understand topological sort will make higher level node first which is not referenced
     - [X] fix the generated regular expression format issue, like: space-character is "|( )" <2025-03-02 Sun>
     - [X] fine generated enum value name with camel case
     - [X] generate lex rules array
       - [X] not escape special char like \n, \t
       - [X] only generate selected token item definition, generate all definition when set to debug
       - [X] redundant parentheses in generated regular expression. Maybe we can move regular expression -> DFA -> regular expression to simplify. Currently, I remove parens from some unnecessary places <2025-03-03 Mon>
       - [X] clear about where the chars from in regular expression
       - [X] escape string like \- in generated regular epxression. Use the previous convert function which convert string in ABNF to printable Cpp string literal
       - [X] merge Terminal in parse rules into lex rules <2025-03-04 Tue>
       - [X] solve the alternative presentation issue or empty representation. Add new operator ? to represent it.  *Wait to test.* <2025-03-05 Wed>
       - [X] not put name logic in CodeEmitter <2025-03-06 Thu>
     - [X] test ? support of regular expression <2025-03-06 Thu>
     - [ ] does our regular epxression implementation support empty parens or square like () or []?
     - [X] in enum definition, keep the order in ABNF file to identical to the Token priority
     - [ ] not sure the new add rules for LINE-START and LINE-END is ok
     - [X] make ABNF parser support to distinguish lex rules and parse rules in ABNF file <2025-03-04 Tue>
     - [ ] solve the wide space issue, "%x3000", maybe not support unicode now
     - [X] check the generated grammar rule is correct. checking: <2025-03-07 Fri>
       - [X] LINESTART is "" which cause regular expression error. No need solve
       - [X] remove LINE-START and LINE-END in lex rules
       - [X] performance issue: it seems has too many partitions when run the DFA Minimize(473), then minimize not end. Maybe not use loop to check, use which one trigger the change and which one is affected?
	 * release version codes run pass with a little long time
	 * lex result has a issue, maybe the token definition has issue
	 * detail the performance improve point
	   * eliminate the data copy when iterate the partitions in Minimize
	   * break loop early when the all states are handled in Minimize
	   * remove duplicate accept check code in NFA2DFA
       - [X] miss parens in situation, like "((\t| )(\t| )*)?('([^\r\n])*)?\r\n|\r|\n" which should be "((\t| )(\t| )*)?('([^\r\n])*)?(\r\n|\r|\n)". <2025-03-10 Mon>
	 * But when add back parens, regular expression has issue on nested parens handling. Fixed: remove a wrong optimization that remove the paren at head and tail which is not paired
     - [X] remove some lex rules which is unnecessary, like LINE-START, LINE-END and so on. Only reserve some needs. <2025-03-09 Sun>
     - [X] support using undersocre to concat two lines <2025-03-10 Mon>
*** TODO Generate parse code[2/11] DEADLINE: <2025-03-17 Mon>
- [X] preparation for parse debug <2025-03-12 Wed>
  - [X] add language snippet loader
  - [X] add part grammars loader to make it independent from other noise grammars
- [ ] pass parse with SimpleGrammar
  - [ ] fix out of range access in RemoveIndirectLeftRecur
  - [ ] fix VBA grammar
  - [ ] a token maybe belong to different tokens, like a token can be typed name or name, and typed name belong to name. Some parse rules need typed name, some rules need name. This is not fixed, priority is not suitable, how to fix it? Implement a token type compatiable check mechanism when parser check the token
- [ ] pass actual grammar unit, simple to complex
  - [ ] enum
- [ ] support EOS token
- [ ] why grammar literal use vector not map?
- [ ] recover tree node as abnf form shown
- [ ] support line concat
- [ ] solve operator priority issue
- [ ] add EOF token type to token type enum
- [X] solve the Reserved-identifier and Identifier corporation
- [ ] check use of private lex rule symbol(non-token type) in parse rules
** TODO Generate AST code
- [ ] add annotation to support AST class generation
** TODO Write Transformer code to translate VBA to Python
** Future improvement:
- [ ] improve the Lexer construction performance.
  - [ ] use map in FiniteAutomataDraft(improve data search)
  - [ ] store pointer or iterator in worklist of NFA2DFA and Minimize(eliminate data copy)



