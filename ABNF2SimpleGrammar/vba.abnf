; TODO add logical line grammar and separator and special token
WSC -> tab-char | eom-char | space-char | DBCS-whitespace | most-Unicode-class-Zs
tab-char -> "" ; TODO how to type tab
eom-char -> "" ; TODO
space-char -> " "

special-token -> "," | "." | "!" | "#" | "&" | "(" | ")" | "*" | "+" | "-" | "/" | ":" | ";" | "<" | "=" | ">" | "?" | "\\" | "^" 
;NO-WS -> <no whitespace characters allowed here> 
;NO-LINE-CONTINUATION -> <a line-continuation is not allowed here> 
EOL -> [WS] LINE-END | single-quote comment-body 
EOS -> *(EOL | ":") ;End Of Statement 
single-quote -> "'" 
comment-body -> *(line-continuation | non-line-termination-character) LINE-END 

; capitalize the first char of grammar part as below
Integer -> integer-literal [ "%" | "&" | "^" ]
integer-literal -> decimal-literal | octal-literal | hex-literal
decimal-literal -> 1*decimal-digit
octal-literal -> "&" [ "o" | "O"] 1*octal-digit
hex-literal -> "&" ["h" | "H"] 1*hex-digit
octal-digit -> '0'-'7'
decimal-digit -> octal-digit | "8" | "9"
hex-digit -> decimal-digit | 'A'-'F' | 'a'-'f'

Float -> (floating-point-literal [floating-point-type-suffix]) | (decimal-literal floating-point-type-suffix)
floating-point-literal -> (integer-digits exponent) | (integer-digits "." [fractional-digits] [exponent]) | ("." fractional-digits [exponent])
integer-digits -> decimal-literal
fractional-digits -> decimal-literal
exponent -> exponent-letter [sign] decimal-literal
exponent-letter -> "D" | "E" | "d" | "e"
sign -> "+" | "-"
floating-point-type-suffix -> "!" | "#" | "@"

Date-or-time -> (date-value 1*WSC time-value) | date-value | time-value
date-value -> left-date-value date-separator middle-date-value [date-separator right-date-value]
left-date-value -> decimal-literal | month-name
middle-date-value -> decimal-literal | month-name
right-date-value -> decimal-literal | month-name
date-separator -> 1*WSC | (*WSC ("/" | "-" | ",") *WSC)
month-name -> english-month-name | english-month-abbreviation
english-month-name -> "january" | "february" | "march" | "april" | "may" | "june" | "july" | "august" | "september" | "october" | "november" | "december"
english-month-abbreviation -> "jan" | "feb" | "mar" | "apr" | "jun" | "jul" | "aug" | "sep" | "oct" | "nov" | "dec"
time-value -> (hour-value ampm) | (hour-value time-separator minute-value [time-separator second-value] [ampm])
hour-value -> decimal-literal
minute-value -> decimal-literal
second-value -> decimal-literal
time-separator -> *WSC (":" | ".") *WSC
ampm -> *WSC ("am" | "pm" | "a" | "p")

String -> double-quote *string-char (double-quote | line-continuation | LINE-END)
double-quote -> "\""
string-char -> NO-LINE-CONTINUATION ((double-quote double-quote) | non-line-termination-char)

reserved-identifier -> statement-keyword | marker-keyword | operator-identifier | special-form | reserved-type-identifier | reserved-name | literal-identifier | rem-keyword | reserved-for-implementation-use | future-reserved
; TODO Identifier -> <not reserved-identifier word> ; use regexp to solve this issue
statement-keyword -> "Call" | "Case" |"Close" | "Const"| "Declare" | "DefBool" | "DefByte" | "DefCur" | "DefDate" | "DefDbl" | "DefInt" | "DefLng" | "DefLngLng" | "DefLngPtr" | "DefObj" | "DefSng" | "DefStr" | "DefVar" | "Dim" | "Do" | "Else" | "ElseIf" | "End" | "EndIf" | "Enum" | "Erase" | "Event" | "Exit" | "For" | "Friend" | "Function" | "Get" | "Global" | "GoSub" | "GoTo" | "If" | "Implements"| "Input" | "Let" | "Lock" | "Loop" | "LSet" | "Next" | "On" | "Open" | "Option" | "Print" | "Private" | "Public" | "Put" | "RaiseEvent" | "ReDim" | "Resume" | "Return" | "RSet" | "Seek" | "Select" | "Set" | "Static" | "Stop" | "Sub" | "Type" | "Unlock" | "Wend" | "While" | "With" | "Write" 
rem-keyword -> "Rem" 
marker-keyword -> "Any" | "As"| "ByRef" | "ByVal "|"Case" | "Each" | "Else" |"In"| "New" | "Shared" | "Until" | "WithEvents" | "Write" | "Optional" | "ParamArray" | "Preserve" | "Spc" | "Tab" | "Then" | "To" 
operator-identifier -> "AddressOf" | "And" | "Eqv" | "Imp" | "Is" | "Like" | "New" | "Mod" | "Not" | "Or" | "TypeOf" | "Xor"
reserved-name -> "Abs" | "CBool" | "CByte" | "CCur" | "CDate" | "CDbl" | "CDec" | "CInt" | "CLng" | "CLngLng" | "CLngPtr" | "CSng" | "CStr" | "CVar" | "CVErr" | "Date" | "Debug" | "DoEvents" | "Fix" | "Int" | "Len" | "LenB" | "Me" | "PSet" | "Scale" | "Sgn" | "String" 
special-form -> "Array" | "Circle" | "Input" | "InputB" | "LBound" | "Scale" | "UBound" 
reserved-type-identifier -> "Boolean" | "Byte" | "Currency" | "Date" | "Double" | "Integer" | "Long" | "LongLong" | "LongPtr" | "Single" | "String" | "Variant" 
literal-identifier -> boolean-literal-identifier | object-literal-identifier | variant-literal-identifier 
boolean-literal-identifier -> "true" | "false" 
object-literal-identifier -> "nothing" 
variant-literal-identifier -> "empty" | "null"  
reserved-for-implementation-use -> "Attribute" | "LINEINPUT" | "VB_Base" | "VB_Control" | "VB_Creatable" | "VB_Customizable" | "VB_Description" | "VB_Exposed" | "VB_Ext_KEY " | "VB_GlobalNameSpace" | "VB_HelpID" | "VB_Invoke_Func" | "VB_Invoke_Property " | "VB_Invoke_PropertyPut" | "VB_Invoke_PropertyPutRef" | "VB_MemberFlags" | "VB_Name" | "VB_PredeclaredId" | "VB_ProcData" | "VB_TemplateDerived" | "VB_UserMemId" | "VB_VarDescription" | "VB_VarHelpID" | "VB_VarMemberFlags" | "VB_VarProcData " | "VB_VarUserMemId" 
future-reserved -> "CDecl" | "Decimal" | "DefDec"

Foreign-name -> "[" foreign-identifier "]" 
foreign-identifier -> 1*non-line-termination-character ; TODO use regexp to implement

Builtin-type -> reserved-type-identifier | ("[" reserved-type-identifier "]") | "object" | "[object]" 

Typed-name -> Identifier type-suffix 
type-suffix -> "%" | "&" | "^" | "!" | "#" | "@" | "$" 

Conditional-module-body -> cc-block
cc-block -> *(cc-const | cc-if-block | logical-line) 
cc-const -> LINE-START "#" "const" cc-var-lhs "=" cc-expression cc-eol ;TODO ignore LINE-START and LINE-END in translation
cc-var-lhs -> name 
cc-eol -> [single-quote *non-line-termination-character] LINE-END
cc-if-block -> cc-if cc-block *cc-elseif-block [cc-else-block] cc-endif 
cc-if -> LINE-START "#" "if" cc-expression "then" cc-eol 
cc-elseif-block -> cc-elseif cc-block 
cc-elseif -> LINE-START "#" "elseif" cc-expression "then" cc-eol 
cc-else-block -> cc-else cc-block 
cc-else -> LINE-START "#" "else" cc-eol 
cc-endif -> LINE-START "#" ("endif" | ("end" "if")) cc-eol 

Procedural-module -> LINE-START procedural-module-header EOS LINE-START procedural-module-body 
Class-module -> LINE-START class-module-header LINE-START class-module-body 
procedural-module-header -> attribute "VB_Name" attr-eq quoted-identifier attr-end 
class-module-header -> 1*class-attr 
class-attr -> attribute "VB_Name" attr-eq quoted-identifier attr-end | attribute "VB_GlobalNameSpace" attr-eq "False" attr-end | attribute "VB_Creatable" attr-eq "False" attr-end | attribute "VB_PredeclaredId" attr-eq boolean-literal-identifier attr-end | attribute "VB_Exposed" attr-eq boolean-literal-identifier attr-end | attribute "VB_Customizable" attr-eq boolean-literal-identifier attr-end 
attribute -> LINE-START "Attribute" 
attr-eq -> "->"
attr-end -> LINE-END
quoted-identifier -> double-quote NO-WS Identifier NO-WS double-quote
procedural-module-body -> LINE-START procedural-module-declaration-section LINE-START procedural-module-code-section 
class-module-body -> LINE-START class-module-declaration-section

unrestricted-name -> name | reserved-identifier 
name -> untyped-name | Typed-name | file-number
untyped-name -> Identifier | Foreign-name

procedural-module-declaration-section -> [*(procedural-module-directive-element EOS) def-directive] *( procedural-module-declaration-element EOS) 
class-module-declaration-section -> [*(class-module-directive-element EOS) def-directive] *(class-module-declaration-element EOS) 
procedural-module-directive-element -> common-option-directive | option-private-directive | def-directive 
procedural-module-declaration-element -> common-module-declaration-element | global-variable-declaration | public-const-declaration | public-type-declaration | public-external-procedure-declaration | global-enum-declaration | common-option-directive | option-private-directive
class-module-directive-element -> common-option-directive | def-directive | implements-directive 
class-module-declaration-element -> common-module-declaration-element | event-declaration | common-option-directive | implements-directive ;commonoption-directive in the doc
common-option-directive -> option-compare-directive | option-base-directive | option-explicit-directive | rem-statement
option-compare-directive -> "Option" "Compare" ( "Binary" | "Text")
option-base-directive -> "Option" "Base" Integer
option-explicit-directive -> "Option" "Explicit"
option-private-directive -> "Option" "Private" "Module"
def-directive -> def-type letter-spec *( "," letter-spec)
letter-spec -> single-letter | universal-letter-range | letter-range
single-letter -> Identifier ; %x0041-005A | %x0061-007A
universal-letter-range -> upper-case-A "-"upper-case-Z
upper-case-A -> Identifier
upper-case-Z -> Identifier
letter-range -> first-letter "-" last-letter
first-letter -> Identifier
last-letter -> Identifier
def-type -> "DefBool" | "DefByte" | "DefCur" | "DefDate" | "DefDbl" | "DefInt" | "DefLng" | "DefLngLng" | "DefLngPtr" | "DefObj" | "DefSng" | "DefStr" | "DefVar" 
common-module-declaration-element -> module-variable-declaration | private-const-declaration | private-type-declaration | public-type-declaration| public-enum-declaration | private-enum-declaration | private-external-procedure-declaration | attribute-statement
module-variable-declaration -> public-variable-declaration | private-variable-declaration
global-variable-declaration -> "Global" variable-declaration-list
public-variable-declaration -> "Public" ["Shared"] module-variable-declaration-list
private-variable-declaration -> ("Private" | "Dim") ["Shared"] module-variable-declaration-list
module-variable-declaration-list -> (withevents-variable-dcl | variable-dcl) *( "," (withevents-variable-dcl | variable-dcl))
variable-declaration-list -> variable-dcl *("," variable-dcl)
variable-dcl -> typed-variable-dcl | untyped-variable-dcl
typed-variable-dcl -> Typed-name [array-dim]
untyped-variable-dcl -> Identifier [array-clause | as-clause]
array-clause -> array-dim [as-clause]
as-clause -> as-auto-object | as-type
withevents-variable-dcl -> "withevents" Identifier "as" class-type-name
class-type-name -> defined-type-expression
array-dim -> "(" [bounds-list] ")"
bounds-list -> dim-spec *("," dim-spec)
dim-spec -> [lower-bound] upper-bound
lower-bound -> constant-expression "to"
upper-bound -> constant-expression 
as-auto-object -> "as" "new" class-type-name
as-type -> "as" type-spec
type-spec -> fixed-length-string-spec | type-expression
fixed-length-string-spec -> "string" "*" string-length
string-length -> constant-name | Integer
constant-name -> simple-name-expression 
public-const-declaration -> ("Global"  | "Public") module-const-declaration
private-const-declaration -> ["Private"] module-const-declaration
module-const-declaration -> const-declaration
const-declaration -> "Const" const-item-list
const-item-list -> const-item *[ "," const-item]
const-item -> typed-name-const-item  | untyped-name-const-item
typed-name-const-item -> Typed-name "=" constant-expression
untyped-name-const-item -> Identifier [const-as-clause] "=" constant-expression
const-as-clause -> "as" Builtin-type

public-type-declaration -> ["global"  | "public"] udt-declaration
private-type-declaration -> "private" udt-declaration
udt-declaration -> "type" untyped-name EOS udt-member-list EOS "end" "type"
udt-member-list -> udt-element *[EOS udt-element]
udt-element -> rem-statement  | udt-member
udt-member -> reserved-name-member-dcl  | untyped-name-member-dcl
untyped-name-member-dcl -> Identifier optional-array-clause
reserved-name-member-dcl -> reserved-member-name as-clause
optional-array-clause -> [array-dim] as-clause
reserved-member-name -> statement-keyword  | marker-keyword  | operator-identifier  | special-form  | reserved-name  | literal-identifier  | reserved-for-implementation-use  | future-reserved

global-enum-declaration -> "global" enum-declaration
public-enum-declaration -> ["public"] enum-declaration
private-enum-declaration -> "private" enum-declaration
enum-declaration -> "enum" untyped-name EOS enum-member-list EOS "end" "enum"
enum-member-list -> enum-element *[EOS enum-element]
enum-element -> rem-statement  | enum-member
enum-member -> untyped-name [ "=" constant-expression] 

public-external-procedure-declaration -> ["public"] external-proc-dcl
private-external-procedure-declaration -> "private" external-proc-dcl
external-proc-dcl -> "declare" ["ptrsafe"] (external-sub  | external-function)
external-sub -> "sub" subroutine-name lib-info [procedure-parameters]
external-function -> "function" function-name lib-info [procedure-parameters] [function-type]
lib-info -> lib-clause [alias-clause]
lib-clause -> "lib" String
alias-clause -> "alias" String 

implements-directive -> "Implements" class-type-name 
event-declaration -> ["Public"] "Event" Identifier [event-parameter-list]
event-parameter-list -> "(" [positional-parameters] ")" 

procedural-module-code-section -> *( LINE-START procedural-module-code-element LINE-END)
class-module-code-section -> *( LINE-START class-module-code-element LINE-END)
procedural-module-code-element -> common-module-code-element
class-module-code-element -> common-module-code-element  | implements-directive
common-module-code-element -> rem-statement  | procedure-declaration
procedure-declaration -> subroutine-declaration  | function-declaration  | property-get-declaration  | property-lhs-declaration 

subroutine-declaration -> procedure-scope [initial-static] "sub" subroutine-name [procedure-parameters] [trailing-static] EOS [procedure-body EOS] [end-label] "end" "sub" procedure-tail 
function-declaration -> procedure-scope [initial-static] "function" function-name [procedure-parameters] [function-type] [trailing-static] EOS [procedure-body EOS] [end-label] "end" "function" procedure-tail
property-get-declaration -> procedure-scope [initial-static] "Property" "Get" function-name [procedure-parameters] [function-type] [trailing-static] EOS [procedure-body EOS] [end-label] "end" "property" procedure-tail
property-lhs-declaration -> procedure-scope [initial-static] "Property" ("Let"  | "Set") subroutine-name property-parameters [trailing-static] EOS [procedure-body EOS] [end-label] "end" "property" procedure-tail
end-label -> statement-label-definition
procedure-tail -> [WS] LINE-END  | single-quote comment-body  | ":" rem-statement
procedure-scope -> ["global" | "public" | "private" | "friend"]
initial-static -> "static"
trailing-static -> "static" 

subroutine-name -> Identifier | prefixed-name
function-name -> Typed-name | subroutine-name
prefixed-name -> event-handler-name | implemented-name | lifecycle-handler-name 

function-type -> "as" type-expression [array-designator]
array-designator -> "(" ")" 

procedure-parameters -> "(" [parameter-list] ")"
property-parameters -> "(" [parameter-list ","] value-param ")"
parameter-list -> (positional-parameters "," optional-parameters ) | (positional-parameters ["," param-array]) | optional-parameters | param-array
positional-parameters -> positional-param *("," positional-param)
optional-parameters -> optional-param *("," optional-param)
value-param -> positional-param
positional-param -> [parameter-mechanism] param-dcl
optional-param -> optional-prefix param-dcl [default-value]
param-array -> "paramarray" Identifier "(" ")" ["as" ("variant" | "[variant]")]
param-dcl -> untyped-name-param-dcl | typed-name-param-dcl
untyped-name-param-dcl -> Identifier [parameter-type]
typed-name-param-dcl -> Typed-name [array-designator]
optional-prefix -> ("optional" [parameter-mechanism]) | ([parameter-mechanism] ("optional"))
parameter-mechanism -> "byval" | " byref"
parameter-type -> [array-designator] "as" (type-expression | "Any")
default-value -> "=" constant-expression

event-handler-name -> Identifier 
implemented-name -> Identifier

lifecycle-handler-name -> "Class_Initialize" | "Class_Terminate" 
procedure-body -> statement-block 

statement-block -> *(block-statement EOS)
block-statement -> statement-label-definition | rem-statement | statement | attribute-statement
attribute-statement -> attribute [Identifier "."] reserved-for-implementation-use attr-eq [quoted-identifier | boolean-literal-identifier]
statement -> control-statement | data-manipulation-statement | error-handling-statement | file-statement

statement-label-definition -> LINE-START ((identifier-statement-label ":") | (line-number-label [":"] ))
statement-label -> identifier-statement-label | line-number-label
statement-label-list -> statement-label ["," statement-label]
identifier-statement-label -> Identifier
line-number-label -> Integer

rem-statement -> "Rem" comment-body

control-statement -> if-statement | control-statement-except-multiline-if
control-statement-except-multiline-if -> call-statement | while-statement | for-statement | exit-for-statement | do-statement | exit-do-statement | single-line-if-statement | select-case-statement |stop-statement | goto-statement | on-goto-statement | gosub-statement | return-statement | on-gosub-statement |for-each-statement | exit-sub-statement | exit-function-statement | exit-property-statement | raiseevent-statement | with-statement | end-statement | assert-statement
call-statement -> ("Call" (simple-name-expression | member-access-expression | index-expression | with-expression)) | ((simple-name-expression | member-access-expression | with-expression) argument-list)
while-statement -> "While" boolean-expression EOS statement-block "Wend"
for-statement -> simple-for-statement | explicit-for-statement
simple-for-statement -> for-clause EOS statement-block "Next" 
explicit-for-statement -> for-clause EOS statement-block ("Next" | (nested-for-statement ",")) bound-variable-expression
nested-for-statement -> explicit-for-statement | explicit-for-each-statement
for-clause -> "For" bound-variable-expression "=" start-value "To" end-value [step-clause]
start-value -> expression
end-value -> expression
step-clause -> "Step" step-increment
step-increment -> expression
for-each-statement -> simple-for-each-statement | explicit-for-each-statement
simple-for-each-statement -> for-each-clause EOS statement-block "Next"
explicit-for-each-statement -> for-each-clause EOS statement-block ("Next" | (nested-for-statement ",")) bound-variable-expression
for-each-clause -> "For" "Each" bound-variable-expression "In" collection
collection -> expression
exit-for-statement -> "Exit" "For"
do-statement -> "Do" [condition-clause] EOS statement-block "Loop" [condition-clause] 
condition-clause -> while-clause | until-clause
while-clause -> "While" boolean-expression
until-clause -> "Until" boolean-expression 
exit-do-statement -> "Exit" "Do" 
if-statement -> LINE-START "If" boolean-expression "Then" EOL statement-block *[else-if-block] [else-block] LINE-START (("End" "If") | "EndIf")
else-if-block -> (LINE-START "ElseIf" boolean-expression "Then" EOL LINE-START statement-block) | ("ElseIf" boolean-expression "Then" statement-block)
else-block -> LINE-START "Else" statement-block
single-line-if-statement -> if-with-non-empty-then | if-with-empty-then
if-with-non-empty-then -> "If" boolean-expression "Then" list-or-label [single-line-else-clause]
if-with-empty-then -> "If" boolean-expression "Then" single-line-else-clause
single-line-else-clause -> "Else" [list-or-label]
list-or-label -> (statement-label *[":" [same-line-statement]]) | ([":"] same-line-statement *[":" [same-line-statement]])
same-line-statement -> file-statement | error-handling-statement | data-manipulation-statement | control-statement-except-multiline-if 
select-case-statement -> "Select" "Case" WS select-expression EOS *[case-clause] [case-else-clause] "End" "Select"
case-clause -> "Case" range-clause *("," range-clause) EOS statement-block
case-else-clause -> "Case" "Else" EOS statement-block
range-clause -> expression | (start-value "To" end-value) | (["Is"] comparison-operator expression)
end-value -> expression
select-expression -> expression
comparison-operator -> "=" | ("<" ">" ) | (">" "<") | "<" | ">" | (">" "=") | ("=" ">") | ("<" "=") | ("=" "<") 
stop-statement -> "Stop" 
goto-statement -> (("Go" "To") | "GoTo") statement-label 
on-goto-statement -> "On" expression "GoTo" statement-label-list
gosub-statement -> (("Go" "Sub") | "GoSub") statement-label
return-statement -> "Return" 
on-gosub-statement -> "On" expression "GoSub" statement-label-list 
exit-sub-statement -> "Exit" "Sub" 
exit-function-statement -> "Exit" "Function" 
exit-property-statement -> "Exit" "Property" 
raiseevent-statement -> "RaiseEvent" Identifier ["(" event-argument-list ")"]
event-argument-list -> [event-argument *("," event-argument)]
event-argument -> expression 
with-statement -> "With" expression EOS statement-block "End" "With" 
end-statement -> "End"
assert-statement -> "Debug" "." "Assert" boolean-expression
data-manipulation-statement -> local-variable-declaration | static-variable-declaration | local-const-declaration | redim-statement | erase-statement | mid-statement | rset-statement | lset-statement | let-statement | set-statement 
local-variable-declaration -> ("Dim" ["Shared"] variable-declaration-list)
static-variable-declaration -> "Static" variable-declaration-list 
local-const-declaration -> const-declaration
redim-statement -> "Redim" ["Preserve"] redim-declaration-list
redim-declaration-list -> redim-variable-dcl *("," redim-variable-dcl)
redim-variable-dcl -> redim-typed-variable-dcl | redim-untyped-dcl | with-expression-dcl | member-access-expression-dcl
redim-typed-variable-dcl -> Typed-name dynamic-array-dim
redim-untyped-dcl -> untyped-name dynamic-array-clause
with-expression-dcl -> with-expression dynamic-array-clause
member-access-expression-dcl -> member-access-expression dynamic-array-clause
dynamic-array-dim -> "(" dynamic-bounds-list ")"
dynamic-bounds-list -> dynamic-dim-spec *[ "," dynamic-dim-spec ]
dynamic-dim-spec -> [dynamic-lower-bound] dynamic-upper-bound
dynamic-lower-bound -> integer-expression "to"
dynamic-upper-bound -> integer-expression
dynamic-array-clause -> dynamic-array-dim [as-clause]
erase-statement -> "Erase" erase-list
erase-list -> erase-element *["," erase-element]
erase-element -> l-expression
mid-statement -> mode-specifier "(" string-argument "," start ["," length] ")" "=" expression
mode-specifier -> ("Mid" | "MidB" | "Mid$" | "MidB$")
string-argument -> bound-variable-expression
start -> integer-expression
length -> integer-expression
lset-statement -> "LSet" bound-variable-expression "=" expression
rset-statement -> "RSet" bound-variable-expression "=" expression 
let-statement -> ["Let"] l-expression "=" expression 
set-statement -> "Set" l-expression "=" expression 
error-handling-statement -> on-error-statement | resume-statement | error-statement
on-error-statement -> "On" "Error" error-behavior
error-behavior -> ("Resume" "Next") | ("GoTo" (statement-label | "0")) ; TODO I don't know why use -1 here after reading related doc, so I fix it to 0
resume-statement -> "Resume" [("Next" | statement-label)] 
error-statement -> "Error" error-number 
error-number -> integer-expression
file-statement -> open-statement | close-statement | seek-statement | lock-statement | unlock-statement | line-input-statement | width-statement | print-statement | write-statement | input-statement | put-statement | get-statement 
open-statement -> "Open" path-name [mode-clause] [access-clause] [lock] "As" file-number [len-clause]
path-name -> expression
mode-clause -> "For" mode
mode -> "Append" | "Binary" | "Input" | "Output" | "Random"
access-clause -> "Access" access
access -> "Read" | "Write" | ("Read" "Write")
lock -> "Shared" | ("Lock" "Read") | ("Lock" "Write") | ("Lock" "Read" "Write")
len-clause -> "Len" "=" rec-length
rec-length -> expression 
file-number -> marked-file-number | unmarked-file-number
marked-file-number -> "#" expression
unmarked-file-number -> expression
close-statement -> "Reset" | ("Close" [file-number-list])
file-number-list -> file-number *[ "," file-number]
seek-statement -> "Seek" file-number "," position
position -> expression
lock-statement -> "Lock" file-number [ "," record-range]
record-range -> start-record-number | ([start-record-number] "To" end-record-number)
start-record-number -> expression
end-record-number -> expression 
unlock-statement -> "Unlock" file-number [ "," record-range]
line-input-statement -> "Line" "Input" marked-file-number "," variable-name
variable-name -> variable-expression 
width-statement -> "Width" marked-file-number "," line-width
line-width -> expression 
print-statement -> [("Debug" | "Me") "."] "Print" marked-file-number "," [output-list]
output-list -> *output-item
output-item -> [output-clause] [char-position]
output-clause -> (spc-clause | tab-clause | output-expression)
char-position -> ( ";" | ",")
output-expression -> expression
spc-clause -> "Spc" "(" spc-number ")"
spc-number -> expression
tab-clause -> "Tab" [tab-number-clause]
tab-number-clause -> "(" tab-number ")" 
tab-number -> expression 
write-statement -> "Write" marked-file-number "," [output-list] 
input-statement -> "Input" marked-file-number "," input-list
input-list -> input-variable *[ "," input-variable]
input-variable -> bound-variable-expression 
put-statement -> "Put" file-number ","[record-number] "," data
record-number -> expression
data -> expression
get-statement -> "Get" file-number "," [record-number] "," variable
variable -> variable-expression

expression -> value-expression | l-expression
value-expression -> literal-expression | parenthesized-expression | typeof-is-expression | new-expression | operator-expression
l-expression -> simple-name-expression | instance-expression | member-access-expression | index-expression | dictionary-access-expression | with-expression 
literal-expression -> Integer | Float | DATE | String | (literal-identifier [type-suffix])
parenthesized-expression -> "(" expression ")" 
typeof-is-expression -> "typeof" expression "is" type-expression
new-expression -> "New" type-expression 
; TODO operator priority
operator-expression -> arithmetic-operator-expression | concatenation-operator-expression | relational-operator-expression | like-operator-expression | is-operator-expression | logical-operator-expression
arithmetic-operator-expression -> unary-minus-operator-expression | addition-operator-expression | subtraction-operator-expression | multiplication-operator-expression | division-operator-expression | integer-division-operator-expression | modulo-operator-expression | exponentiation-operator-expression
unary-minus-operator-expression -> "-" expression
addition-operator-expression -> expression "+" expression
subtraction-operator-expression -> expression "-" expression 
multiplication-operator-expression -> expression "*" expression
division-operator-expression -> expression "/" expression
integer-division-operator-expression -> expression "\\" expression
modulo-operator-expression -> expression "mod" expression 
exponentiation-operator-expression -> expression "^" expression
concatenation-operator-expression -> expression "&" expression
relational-operator-expression -> equality-operator-expression | inequality-operator-expression | less-than-operator-expression | greater-than-operator-expression | less-than-equal-operator-expression | greater-than-equal-operator-expression
equality-operator-expression -> expression "=" expression 
inequality-operator-expression -> expression ( "<"">" | ">""<" ) expression
less-than-operator-expression -> expression "<" expression
greater-than-operator-expression -> expression ">" expression 
less-than-equal-operator-expression -> expression ( "<""=" | "=""<" ) expression
greater-than-equal-operator-expression -> expression ( ">""=" | "="">" ) expression 
like-operator-expression -> expression "like" like-pattern-expression
like-pattern-expression -> expression 
like-pattern-string -> *like-pattern-element
like-pattern-element -> like-pattern-char | "?" | "#" | "*" | like-pattern-charlist
; TODO like-pattern-char -> <Any character except "?", "#", "*" and "[" >
like-pattern-charlist -> "[" ["!"] ["-"] *like-pattern-charlist-element ["-"] "]"
like-pattern-charlist-element -> like-pattern-charlist-char | like-pattern-charlist-range
like-pattern-charlist-range -> like-pattern-charlist-char "-" like-pattern-charlist-char
; TODO like-pattern-charlist-char -> <Any character except "-" and "]">
is-operator-expression -> expression "is" expression
logical-operator-expression -> not-operator-expression | and-operator-expression | or-operator-expression | xor-operator-expression | imp-operator-expression | eqv-operator-expression 
not-operator-expression -> "not" expression 
and-operator-expression -> expression "and" expression
or-operator-expression -> expression "or" expression 
xor-operator-expression -> expression "xor" expression 
eqv-operator-expression -> expression "eqv" expression
imp-operator-expression -> expression "imp" expression 
simple-name-expression -> name | special-form | reserved-name 
instance-expression -> "me" 
member-access-expression -> (l-expression NO-WS "." unrestricted-name) | (l-expression line-continuation "." unrestricted-name)
index-expression -> l-expression "(" argument-list ")" 
argument-list -> [positional-or-named-argument-list]
positional-or-named-argument-list -> (*(positional-argument ",") required-positional-argument) | (*(positional-argument ",") named-argument-list)
positional-argument -> [argument-expression]
required-positional-argument -> argument-expression
named-argument-list -> named-argument *("," named-argument)
named-argument -> unrestricted-name ":""=" argument-expression
argument-expression -> (["byval"] expression) | addressof-expression 
dictionary-access-expression -> (l-expression NO-WS "!" NO-WS unrestricted-name) | (l-expression line-continuation "!" NO-WS unrestricted-name) | (l-expression line-continuation "!" line-continuation unrestricted-name)
with-expression -> with-member-access-expression | with-dictionary-access-expression
with-member-access-expression -> "." unrestricted-name
with-dictionary-access-expression -> "!" unrestricted-name
constant-expression -> expression
cc-expression -> expression 
boolean-expression -> expression
integer-expression -> expression
variable-expression -> l-expression 
bound-variable-expression -> l-expression 
type-expression -> Builtin-type | defined-type-expression
defined-type-expression -> simple-name-expression | member-access-expression
addressof-expression -> "addressof" procedure-pointer-expression
procedure-pointer-expression -> simple-name-expression | member-access-expression 