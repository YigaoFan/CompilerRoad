module-body-physical-structure -> *source-line [non-terminated-line] 
source-line -> *non-line-termination-character line-terminator 
non-terminated-line -> *non-line-termination-character 
line-terminator -> "\r\n" | "\r" | "\n"
non-line-termination-character -> r"[^\r\n]" 
LINE-END -> "\n"
LINE-START -> ""

module-body-logical-structure -> *extended-line 
extended-line -> *(line-continuation | non-line-termination-character) line-terminator 
line-continuation -> 1*WSC underscore line-terminator 
WSC -> (tab-character | space-character | DBCS-whitespace) 
tab-character -> "\t"
space-character -> " "
underscore -> "_"
DBCS-whitespace -> "%x3000"

module-body-lines -> *logical-line 
logical-line -> LINE-START *extended-line LINE-END

WS -> 1*(WSC | line-continuation)
special-token -> "," | "." | "!" | "#" | "&" | "(" | ")" | "*" | "+" | "-" | "/" | ":" | ";" | "<" | "=" | ">" | "?" | "\\" | "^" 
EOL -> [WS] LINE-END | single-quote comment-body 
EOS -> *(EOL | ":") ;End Of Statement 
single-quote -> "'" 
comment-body -> *(line-continuation | non-line-termination-character) LINE-END 

; capitalize the first char of grammar part as below
Integer -> integer-literal [ "%" | "&" | "^" ]
integer-literal -> decimal-literal | octal-literal | hex-literal
decimal-literal -> 1*decimal-digit
octal-literal -> "&" [ "o" | "O"] 1*octal-digit
hex-literal -> "&" ["h" | "H"] 1*hex-digit
octal-digit -> '0'-'7'
decimal-digit -> octal-digit | "8" | "9"
hex-digit -> decimal-digit | 'A'-'F' | 'a'-'f'

Float -> (floating-point-literal [floating-point-type-suffix]) | (decimal-literal floating-point-type-suffix)
floating-point-literal -> (integer-digits exponent) | (integer-digits "." [fractional-digits] [exponent]) | ("." fractional-digits [exponent])
integer-digits -> decimal-literal
fractional-digits -> decimal-literal
exponent -> exponent-letter [sign] decimal-literal
exponent-letter -> "D" | "E" | "d" | "e"
sign -> "+" | "-"
floating-point-type-suffix -> "!" | "#" | "@"

Date-or-time -> (date-value 1*WSC time-value) | date-value | time-value
date-value -> left-date-value date-separator middle-date-value [date-separator right-date-value]
left-date-value -> decimal-literal | month-name
middle-date-value -> decimal-literal | month-name
right-date-value -> decimal-literal | month-name
date-separator -> 1*WSC | (*WSC ("/" | "-" | ",") *WSC)
month-name -> english-month-name | english-month-abbreviation
english-month-name -> "january" | "february" | "march" | "april" | "may" | "june" | "july" | "august" | "september" | "october" | "november" | "december"
english-month-abbreviation -> "jan" | "feb" | "mar" | "apr" | "jun" | "jul" | "aug" | "sep" | "oct" | "nov" | "dec"
time-value -> (hour-value ampm) | (hour-value time-separator minute-value [time-separator second-value] [ampm])
hour-value -> decimal-literal
minute-value -> decimal-literal
second-value -> decimal-literal
time-separator -> *WSC (":" | ".") *WSC
ampm -> *WSC ("am" | "pm" | "a" | "p")

String -> double-quote *string-char (double-quote | line-continuation | LINE-END)
double-quote -> "\""
string-char -> ((double-quote double-quote) | non-line-termination-character)

Reserved-identifier -> statement-keyword | marker-keyword | operator-identifier | special-form | reserved-type-identifier | reserved-name | literal-identifier | rem-keyword | reserved-for-implementation-use | future-reserved
Identifier -> r"[a-zA-Z][a-zA-Z0-9_\-]*"
statement-keyword -> "Call" | "Case" |"Close" | "Const"| "Declare" | "DefBool" | "DefByte" | "DefCur" | "DefDate" | "DefDbl" | "DefInt" | "DefLng" | "DefLngLng" | "DefLngPtr" | "DefObj" | "DefSng" | "DefStr" | "DefVar" | "Dim" | "Do" | "Else" | "ElseIf" | "End" | "EndIf" | "Enum" | "Erase" | "Event" | "Exit" | "For" | "Friend" | "Function" | "Get" | "Global" | "GoSub" | "GoTo" | "If" | "Implements"| "Input" | "Let" | "Lock" | "Loop" | "LSet" | "Next" | "On" | "Open" | "Option" | "Print" | "Private" | "Public" | "Put" | "RaiseEvent" | "ReDim" | "Resume" | "Return" | "RSet" | "Seek" | "Select" | "Set" | "Static" | "Stop" | "Sub" | "Type" | "Unlock" | "Wend" | "While" | "With" | "Write" 
rem-keyword -> "Rem" 
marker-keyword -> "Any" | "As"| "ByRef" | "ByVal "|"Case" | "Each" | "Else" |"In"| "New" | "Shared" | "Until" | "WithEvents" | "Write" | "Optional" | "ParamArray" | "Preserve" | "Spc" | "Tab" | "Then" | "To" 
operator-identifier -> "AddressOf" | "And" | "Eqv" | "Imp" | "Is" | "Like" | "New" | "Mod" | "Not" | "Or" | "TypeOf" | "Xor"
reserved-name -> "Abs" | "CBool" | "CByte" | "CCur" | "CDate" | "CDbl" | "CDec" | "CInt" | "CLng" | "CLngLng" | "CLngPtr" | "CSng" | "CStr" | "CVar" | "CVErr" | "Date" | "Debug" | "DoEvents" | "Fix" | "Int" | "Len" | "LenB" | "Me" | "PSet" | "Scale" | "Sgn" | "String" 
special-form -> "Array" | "Circle" | "Input" | "InputB" | "LBound" | "Scale" | "UBound" 
reserved-type-identifier -> "Boolean" | "Byte" | "Currency" | "Date" | "Double" | "Integer" | "Long" | "LongLong" | "LongPtr" | "Single" | "String" | "Variant" 
literal-identifier -> boolean-literal-identifier | object-literal-identifier | variant-literal-identifier 
boolean-literal-identifier -> "true" | "false" 
object-literal-identifier -> "nothing" 
variant-literal-identifier -> "empty" | "null"  
reserved-for-implementation-use -> "Attribute" | "LINEINPUT" | "VB_Base" | "VB_Control" | "VB_Creatable" | "VB_Customizable" | "VB_Description" | "VB_Exposed" | "VB_Ext_KEY " | "VB_GlobalNameSpace" | "VB_HelpID" | "VB_Invoke_Func" | "VB_Invoke_Property " | "VB_Invoke_PropertyPut" | "VB_Invoke_PropertyPutRef" | "VB_MemberFlags" | "VB_Name" | "VB_PredeclaredId" | "VB_ProcData" | "VB_TemplateDerived" | "VB_UserMemId" | "VB_VarDescription" | "VB_VarHelpID" | "VB_VarMemberFlags" | "VB_VarProcData " | "VB_VarUserMemId" 
future-reserved -> "CDecl" | "Decimal" | "DefDec"

Foreign-name -> "[" foreign-identifier "]" 
foreign-identifier -> 1*non-line-termination-character ; TODO use regexp to implement

Builtin-type -> reserved-type-identifier | ("[" reserved-type-identifier "]") | "object" | "[object]" 

Typed-name -> Identifier type-suffix 
type-suffix -> "%" | "&" | "^" | "!" | "#" | "@" | "$" 

;Conditional-module-body -> cc-block
;cc-block -> *(cc-const | cc-if-block | logical-line) 
;cc-const -> LINE-START "#" "const" cc-var-lhs "=" cc-expression cc-eol ;TODO ignore LINE-START and LINE-END in translation
;cc-var-lhs -> name 
;cc-eol -> [single-quote *non-line-termination-character] LINE-END
;cc-if-block -> cc-if cc-block *cc-elseif-block [cc-else-block] cc-endif 
;cc-if -> LINE-START "#" "if" cc-expression "then" cc-eol 
;cc-elseif-block -> cc-elseif cc-block 
;cc-elseif -> LINE-START "#" "elseif" cc-expression "then" cc-eol 
;cc-else-block -> cc-else cc-block 
;cc-else -> LINE-START "#" "else" cc-eol 
;cc-endif -> LINE-START "#" ("endif" | ("end" "if")) cc-eol 

; above is lex rule

